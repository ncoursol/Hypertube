// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  firstName String?
  lastName String?
  password String?
  salt String?
  token String?
  email_confirm_id String?
  email_verified	Boolean @default(false)
  reset_pwd	String?
  language String @default("en")
  createdAt DateTime @default(now())
  authMethod String @default("EMAIL")
  profile_picture String?
  favoriteMovies FavoriteMovie[]
  viewedMovies ViewedMovie[]
  comments Comment[]
//   moviesLiked Movies[] @relation("MoviesLiked")
//   moviesViewed Movies[] @relation("MoviesViewed")
}

model Movies {
	id Int @id @default(autoincrement())
	createdAt DateTime @default(now())
	imdb_code String @unique
	title String
	folder String?
	file String?
	dateDownload DateTime?
	year Int
	rating Int
	runtime Int
	genres String?
	summary String?
	language String
	background_image String
	favoritedBy FavoriteMovie[]
	viewedBy ViewedMovie[]
	comments Comment[]
	status String @default("NOTDOWNLOADED")
	// likedBy User[] @relation("MoviesLiked")
	// viewedBy User[] @relation("MoviesViewed")
}

model FavoriteMovie {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  movie     Movies    @relation(fields: [movieId], references: [id])
  movieId   Int
  createdAt DateTime @default(now())
  imdb_code String   @default("")
}

model ViewedMovie {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  movie     Movies    @relation(fields: [movieId], references: [id])
  movieId   Int
  createdAt DateTime @default(now())
  imdb_code String   @default("")
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  movie     Movies   @relation(fields: [movieId], references: [id])
  movieId   Int
}
